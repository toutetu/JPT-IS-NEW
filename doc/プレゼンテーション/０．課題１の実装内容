# 課題１の実装内容

## 📋 アプリケーション概要

**JPT-IS-NEW**（中学校向け連絡帳システム）

生徒が日々の学習記録や体調・メンタル状態を記録し、担任が確認・既読処理を行い、管理者がユーザーやクラスを管理する学校向けWebアプリケーションです。

---

## 🎯 システムの目的

1. **生徒の自己管理能力の向上**
   - 日々の学習内容や体調を記録する習慣を養う
   - 自分の状態を客観的に振り返る機会を提供

2. **担任と生徒のコミュニケーション促進**
   - 生徒の状況を担任が把握しやすくする
   - 早期の問題発見とサポート

3. **学校運営の効率化**
   - 紙の連絡帳からデジタル化
   - ユーザー管理・クラス管理の一元化

---

## 👥 ユーザーロール

システムには3つのロールがあります：

| ロール | 説明 | 主な機能 |
|--------|------|---------|
| **生徒（student）** | 連絡帳を記入・提出する | 連絡帳の作成・編集・提出、提出カレンダー表示 |
| **先生（teacher）** | 担当クラスの連絡帳を確認・既読処理 | 提出状況確認、既読処理、生徒別過去記録閲覧 |
| **管理者（admin）** | システム全体を管理 | ユーザー管理、クラス管理、CSV一括登録、割当管理 |

---

## ✨ 主要機能

### 🎓 生徒機能

#### 1. マイ連絡帳一覧
- **機能**: 過去に提出した連絡帳の一覧を表示
- **特徴**:
  - 提出日順に表示（新しい順）
  - 曜日付きで日付を表示（例：`2024-10-30 (水)`）
  - 既読/未読状態を一目で確認（👍マーク）
  - ページネーション機能（20件/ページ）

#### 2. 新規連絡帳の作成・提出
- **機能**: 連絡帳を新規作成して提出
- **特徴**:
  - 対象日の自動設定：
    - 月曜日 → 前の金曜日を初期値
    - 火〜日曜日 → 前日を初期値
  - 対象日を手動で変更可能
  - 同じ日付の重複提出を防止
  - 入力項目：
    - 対象日
    - 本日の学習内容（テキストエリア）
    - 今日やったこと・気づいたこと（テキストエリア）
    - 体調スコア（1〜5の5段階）
    - メンタルスコア（1〜5の5段階）

#### 3. 連絡帳の詳細表示・編集
- **機能**: 提出済みの連絡帳を閲覧・編集
- **特徴**:
  - 既読/未読状態を表示
  - **未読の場合のみ編集可能**
  - 既読後は編集不可（編集ボタンが表示されない）
  - 全ての記入内容を表示
  - 体調・メンタルスコアを色付きで表示

#### 4. 提出カレンダー
- **機能**: 月別の提出状況をカレンダー形式で表示
- **特徴**:
  - 月次カレンダー表示
  - 提出済みの日付に 👍 マーク
  - 未提出の日はマークなし
  - 月の切り替え機能（前月・次月ボタン）
  - カレンダーから直接連絡帳を閲覧可能

---

### 👨‍🏫 先生機能

#### 1. 提出状況ダッシュボード
- **機能**: 担当クラスの連絡帳提出状況を確認
- **特徴**:
  - 日付フィルタ機能（過去の日付も閲覧可能）
  - デフォルト表示：前登校日（月曜は前の金曜）
  - KPI表示：
    - 対象生徒数
    - 提出済み数
    - 未提出数
    - 未読数
  - 未提出生徒一覧（名前表示）
  - 提出済み一覧：
    - 生徒名
    - 本文先頭100文字のプレビュー
    - 既読/未読状態（👍マーク）
    - ページネーション（20件/ページ）

#### 2. 連絡帳の詳細確認・既読処理
- **機能**: 生徒が提出した連絡帳の内容を確認し、既読にする
- **特徴**:
  - 全ての記入内容を表示
  - 体調・メンタルスコアを色分け表示：
    - 緑：良好（4〜5）
    - 黄：普通（3）
    - 赤：要注意（1〜2）
  - 「既読にする」ボタン（未読の場合のみ表示）
  - 既読後は 👍 マークに変更

#### 3. 生徒別過去記録確認
- **機能**: 担当クラスの生徒一覧を表示し、個別の過去記録を閲覧
- **特徴**:
  - 担当クラス生徒の一覧表示
  - 生徒名検索機能
  - 特定生徒の過去記録一覧：
    - デフォルト：過去30日分を表示
    - 日付範囲フィルタ機能（開始日・終了日指定）
    - 体調・メンタルスコアの推移を確認
    - 時系列で連絡帳を閲覧
  - 過去記録からも既読処理が可能
  - 担当外の生徒へのアクセスは403エラーで防止

---

### 🔧 管理者機能

#### 1. ユーザー管理
- **機能**: システムのユーザーを管理
- **特徴**:
  - ユーザー一覧表示：
    - ID、名前、メールアドレス、ロール、割り当てクラス
    - 割り当てクラス列：
      - 生徒：在籍クラス
      - 先生：担当クラス
      - 管理者：－
  - 検索機能：
    - 名前・メールアドレスで検索
    - ロールでフィルタ（生徒/先生/管理者）
  - 操作ボタン：
    - 「在籍を変更」（生徒のみ）
    - 「担任割当を変更」（先生のみ）
    - 「編集」
    - 「削除」
  - ページネーション（10件/ページ）

#### 2. ユーザーの新規作成
- **機能**: 新しいユーザーを手動で作成
- **特徴**:
  - 入力項目：
    - 名前
    - メールアドレス
    - パスワード
    - ロール（生徒/先生/管理者）
  - バリデーション：
    - メールアドレスの形式チェック
    - メールアドレスの重複チェック
    - パスワードの最小文字数

#### 3. ユーザーの編集
- **機能**: 既存ユーザー情報を編集
- **特徴**:
  - 名前、メールアドレス、ロールを変更可能
  - パスワードは変更する場合のみ入力

#### 4. ユーザーの削除
- **機能**: ユーザーを削除
- **特徴**:
  - 削除確認画面を表示
  - 削除対象のユーザー情報を確認可能
  - 削除実行前に最終確認

#### 5. CSV一括登録
- **機能**: CSVファイルから複数ユーザーを一括登録
- **特徴**:
  - CSVフォーマット：`名前,メールアドレス,パスワード,ロール`
  - サンプルCSVのダウンロード機能
  - 一度に複数ユーザーを登録可能
  - エラー時は詳細なエラーメッセージを表示

#### 6. クラス管理
- **機能**: 学年・クラスを管理
- **特徴**:
  - クラス一覧表示：
    - ID、学年、クラス名、在籍生徒数、担任名
  - 新規クラス作成：
    - 学年選択（1年/2年/3年）
    - クラス名入力（例：1年A組）
    - 同じ学年内で同じクラス名は登録不可
  - クラス削除：
    - 削除前の安全性チェック
    - 在籍生徒がいる場合は削除不可
    - 担任が割り当てられている場合は削除不可
    - 削除確認画面で詳細情報を表示
  - 担任変更リンク：
    - 各クラスから直接担任割当画面へ遷移

#### 7. 生徒在籍割当
- **機能**: 生徒をクラスに割り当てる
- **特徴**:
  - ユーザー一覧から「在籍を変更」ボタンで遷移
  - 対象生徒の現在の在籍クラスを自動取得・プリセット
  - 別のクラスを選択して割り当て変更
  - 過去の在籍情報を履歴として保持（is_active フラグ）

#### 8. 担任割当
- **機能**: 先生をクラスの担任として割り当てる
- **特徴**:
  - ユーザー一覧から「担任割当を変更」ボタンで遷移
  - クラス一覧から「担任変更」ボタンで遷移
  - 対象教師の現在の担当クラスを自動取得・プリセット
  - 別のクラスを選択して担任変更
  - 過去の担任情報を履歴として保持（until_date フィールド）
  - 1人の教師が複数クラスを担当可能

#### 9. CSVクラス割り当て
- **機能**: CSVファイルから生徒のクラス割り当てを一括実行
- **特徴**:
  - CSVフォーマット：`メールアドレス,クラスID`
  - サンプルCSVのダウンロード機能
  - 一度に複数の生徒のクラス割り当てを変更可能
  - エラー時は詳細なエラーメッセージを表示

---

## 🔒 セキュリティ・アクセス制御

### 認証
- Laravel標準のAuth機能を使用
- ログイン必須（未ログイン時は自動的にログイン画面へリダイレクト）

### 権限管理
- **ロールベースアクセス制御（RBAC）**
- 各機能は該当ロールのみアクセス可能：
  - 生徒機能：`role === 'student'`
  - 先生機能：`role === 'teacher'`
  - 管理者機能：`role === 'admin'`
- 不正アクセス時は403エラー

### データアクセス制限
- **生徒**: 自分の連絡帳のみアクセス可能
- **先生**: 担当クラスの生徒の連絡帳のみアクセス可能
- **管理者**: 全データにアクセス可能

---

## 🎨 UI/UX の特徴

### デザイン
- **Bootstrap 5**ベースのレスポンシブデザイン
- モダンで直感的なUI
- カード型レイアウトで情報を整理

### ユーザビリティ
- **曜日表示**: すべての日付に曜日を表示（例：`2024-10-30 (水)`）
- **既読表示**: 👍 マークで視覚的に既読状態を表示
- **色分け表示**: 体調・メンタルスコアを色分け（緑/黄/赤）
- **ページネーション**: 大量データでも快適に閲覧
- **検索・フィルタ機能**: 必要な情報を素早く見つけられる

### フィードバック
- 成功メッセージ（緑色）
- エラーメッセージ（赤色）
- 確認ダイアログ（削除時など）

---

## 🗄️ データベース設計

### テーブル構成

#### users（ユーザー）
- ユーザーの基本情報（名前、メール、パスワード、ロール）
- `role`: student / teacher / admin

#### grades（学年）
- 学年情報（1年/2年/3年）

#### classrooms（クラス）
- クラス情報（学年ID、クラス名）
- 例：1年A組、2年B組

#### enrollments（在籍）
- 生徒とクラスの紐付け
- `is_active`: 現在在籍中かどうか
- 過去の在籍履歴も保持

#### homeroom_assignments（担任割当）
- 教師とクラスの紐付け
- `from_date` 〜 `until_date`: 担任期間
- 過去の担任履歴も保持

#### daily_logs（連絡帳）
- 生徒の日々の連絡帳
- 対象日、学習内容、気づき、体調、メンタル
- `is_read`: 既読フラグ
- `read_at`: 既読日時

### リレーションシップ
- users ← enrollments → classrooms（生徒の在籍）
- users ← homeroom_assignments → classrooms（先生の担任）
- users ← daily_logs（生徒の連絡帳）
- classrooms ← grades（クラスの学年）

---

## 🛠️ 技術スタック

### バックエンド
- **Laravel**: 12.35.0
- **PHP**: 8.2.12
- **Database**: MySQL / SQLite

### フロントエンド
- **Bootstrap**: 5.x
- **Vite**: ビルドツール
- **Blade**: Laravelテンプレートエンジン

### 開発ツール
- **Composer**: PHP依存関係管理
- **npm**: Node.js依存関係管理
- **Git**: バージョン管理
- **Laravel Cloud**: デプロイ環境

---

## 📊 データフロー

### 生徒の連絡帳提出フロー
1. 生徒がログイン
2. 「新規提出」をクリック
3. 対象日・学習内容・体調などを入力
4. 「提出」ボタンをクリック
5. データベースに保存（`is_read = false`）
6. 担任の「提出状況」画面に表示される

### 担任の既読処理フロー
1. 担任がログイン
2. 「提出状況」画面で未読の連絡帳を確認
3. 詳細画面で内容を確認
4. 「既読にする」ボタンをクリック
5. データベース更新（`is_read = true`, `read_at = 現在時刻`）
6. 生徒の詳細画面で 👍 マークが表示される

### 管理者のユーザー管理フロー
1. 管理者がログイン
2. 「ユーザー管理」画面でユーザー一覧を確認
3. 「新規作成」または「CSV一括登録」でユーザー追加
4. 「在籍を変更」または「担任割当を変更」で割り当て管理
5. データベースに保存

---

## 🎯 実装の工夫点

### 1. 前登校日ロジック
- 月曜日は前の金曜日を自動設定
- 土日を考慮した日付計算
- `DateHelper` クラスで共通化

### 2. 既読後の編集防止
- 既読後は生徒が編集できないように制御
- 意図しない内容変更を防止
- 先生が確認した内容の信頼性を保証

### 3. 割り当てのプリセット表示
- ユーザー一覧から遷移時、現在の割り当てを自動取得
- ユーザーが現状を確認しやすい
- 変更前後の比較が容易

### 4. 担当外アクセスの防止
- 担任は担当クラスの生徒のみアクセス可能
- 不正アクセスを403エラーでブロック
- プライバシー保護

### 5. 過去記録の保持
- 在籍変更時も過去の在籍情報を保持（`is_active`）
- 担任変更時も過去の担任情報を保持（`until_date`）
- 履歴データとして活用可能

### 6. MVC アーキテクチャの厳守
- **Model**: データベース操作・ビジネスロジック
- **View**: 表示のみ（Blade テンプレート）
- **Controller**: リクエスト処理・View への値の受け渡し
- **Service 層**: 複雑なビジネスロジックを分離

### 7. 日本語対応
- 全てのエラーメッセージを日本語化
- バリデーションメッセージも日本語
- 中学生にもわかりやすい表現

---

## 🧪 テスト機能

### 初期データ（Seeder）
- 管理者: 1名
- 先生: 8名（各クラス担任）
- 生徒: 30名（1年A組: 12名、1年B組: 10名、2年A組: 8名）
- クラス: 8クラス（各学年にA組・B組・C組など）
- 過去20日分の連絡帳データ（一部生徒のみ）

### 自動テスト機能
- `tests/Feature/` 配下に各種テスト
- 実行: `php artisan test` または `./run_tests.bat`
- テスト項目:
  - AdminTest: 管理者機能
  - TeacherTest: 先生機能
  - StudentTest: 生徒機能
  - IntegrationTest: 統合テスト

---

## 📱 レスポンシブ対応

- PC、タブレット、スマートフォンに対応
- Bootstrap のグリッドシステムを活用
- 画面サイズに応じた最適なレイアウト

---

## 🚀 デプロイ環境

### Laravel Cloud
- **URL**: https://contact-book-main1-flsrse.laravel.cloud/
- 自動デプロイ設定（GitHub連携）
- ポストデプロイコマンド:
  - `php artisan storage:link --force`
  - `php artisan migrate --force`
  - `php artisan config:cache`
  - `php artisan route:cache`
  - `php artisan view:cache`

---

## 📚 ドキュメント

### ユーザー向け
- **アプリケーションの利用マニュアル**
  - オンライン版（各ロール専用マニュアル）
  - PDF版（生徒向け、先生向け、管理者向け）
- **テストアカウント一覧**

### 開発者向け
- **開発者向けトラブルシューティング**
- **Database Design**
- **Automated Testing Guide**
- **Mailtrap Setup Guide**
- **学籍番号ベース認証への移行計画**（次期開発課題）
- **更新履歴**

### プレゼンテーション
- **課題１の実装内容**（本ファイル）
- **課題１の工夫点・アピールポイント**
- **課題２のプレゼンテーション資料**

---

## 🔮 次期開発予定

### 学籍番号ベース認証への移行
- **背景**: 中学生向けのため、メールアドレスベースから学籍番号ベースへ移行
- **初期パスワード**: `学籍番号 + pw`（例：`2024001pw`）
- **運用**: 
  - 新入生入学時に配布
  - 初回ログイン時に強制的にパスワード変更
  - 担任がパスワードリセット権限を持つ
- **実装予定**: 約5時間
- **詳細**: `doc/開発メモ/学籍番号ベース認証への移行計画.md`

---

## 📊 機能一覧サマリー

| カテゴリ | 機能数 | 主な機能 |
|---------|-------|---------|
| **生徒機能** | 4 | 連絡帳作成・編集・一覧・提出カレンダー |
| **先生機能** | 3 | 提出状況確認・既読処理・生徒別過去記録 |
| **管理者機能** | 9 | ユーザー管理・クラス管理・CSV一括登録・割当管理 |
| **合計** | 16 | - |

---

## ✅ 実装完了機能チェックリスト

### 生徒機能
- [x] マイ連絡帳一覧表示
- [x] 新規連絡帳の作成・提出
- [x] 連絡帳の詳細表示
- [x] 連絡帳の編集（未読のみ）
- [x] 提出カレンダー表示

### 先生機能
- [x] 提出状況ダッシュボード
- [x] 日付フィルタ機能
- [x] 連絡帳の詳細確認
- [x] 既読処理
- [x] 担当クラス生徒一覧
- [x] 生徒別過去記録一覧
- [x] 日付範囲フィルタ

### 管理者機能
- [x] ユーザー一覧表示
- [x] ユーザー検索・フィルタ
- [x] ユーザーの新規作成
- [x] ユーザーの編集
- [x] ユーザーの削除
- [x] CSV一括登録
- [x] クラス一覧表示
- [x] クラスの新規作成
- [x] クラスの削除
- [x] 生徒在籍割当
- [x] 担任割当
- [x] CSVクラス割り当て

### 共通機能
- [x] ログイン・ログアウト
- [x] レスポンシブデザイン
- [x] エラーメッセージ日本語化
- [x] バリデーション
- [x] ページネーション
- [x] 検索・フィルタ

---

## 🎓 学習成果

このプロジェクトを通じて以下を学習・実装しました：

1. **Laravel フレームワークの理解**
   - MVC アーキテクチャ
   - Eloquent ORM
   - Blade テンプレート
   - マイグレーション・シーダー

2. **データベース設計**
   - 正規化
   - リレーションシップ
   - インデックス設計

3. **認証・認可**
   - Laravel Auth
   - ロールベースアクセス制御

4. **UI/UX 設計**
   - Bootstrap
   - レスポンシブデザイン
   - ユーザビリティ

5. **Git・バージョン管理**
   - コミット管理
   - ブランチ戦略

6. **デプロイ・運用**
   - Laravel Cloud
   - 環境変数管理
   - ポストデプロイコマンド

---

**作成日**: 2025-10-30  
**バージョン**: v2.4.0  
**実装状況**: ✅ 完了（次期開発計画: 学籍番号ベース認証への移行）

